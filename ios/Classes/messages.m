// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FBCommonParams ()
+ (FBCommonParams *)fromMap:(NSDictionary *)dict;
+ (nullable FBCommonParams *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FBStackInfo ()
+ (FBStackInfo *)fromMap:(NSDictionary *)dict;
+ (nullable FBStackInfo *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FBCommonParams
+ (instancetype)makeWithPageName:(nullable NSString *)pageName
    uniqueId:(nullable NSString *)uniqueId
    arguments:(nullable NSDictionary<NSString *, id> *)arguments
    opaque:(nullable NSNumber *)opaque
    key:(nullable NSString *)key {
  FBCommonParams* pigeonResult = [[FBCommonParams alloc] init];
  pigeonResult.pageName = pageName;
  pigeonResult.uniqueId = uniqueId;
  pigeonResult.arguments = arguments;
  pigeonResult.opaque = opaque;
  pigeonResult.key = key;
  return pigeonResult;
}
+ (FBCommonParams *)fromMap:(NSDictionary *)dict {
  FBCommonParams *pigeonResult = [[FBCommonParams alloc] init];
  pigeonResult.pageName = GetNullableObject(dict, @"pageName");
  pigeonResult.uniqueId = GetNullableObject(dict, @"uniqueId");
  pigeonResult.arguments = GetNullableObject(dict, @"arguments");
  pigeonResult.opaque = GetNullableObject(dict, @"opaque");
  pigeonResult.key = GetNullableObject(dict, @"key");
  return pigeonResult;
}
+ (nullable FBCommonParams *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FBCommonParams fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"pageName" : (self.pageName ?: [NSNull null]),
    @"uniqueId" : (self.uniqueId ?: [NSNull null]),
    @"arguments" : (self.arguments ?: [NSNull null]),
    @"opaque" : (self.opaque ?: [NSNull null]),
    @"key" : (self.key ?: [NSNull null]),
  };
}
@end

@implementation FBStackInfo
+ (instancetype)makeWithContainers:(nullable NSArray<NSString *> *)containers
    routes:(nullable NSDictionary<NSString *, NSArray<NSDictionary<NSString *, id> *> *> *)routes {
  FBStackInfo* pigeonResult = [[FBStackInfo alloc] init];
  pigeonResult.containers = containers;
  pigeonResult.routes = routes;
  return pigeonResult;
}
+ (FBStackInfo *)fromMap:(NSDictionary *)dict {
  FBStackInfo *pigeonResult = [[FBStackInfo alloc] init];
  pigeonResult.containers = GetNullableObject(dict, @"containers");
  pigeonResult.routes = GetNullableObject(dict, @"routes");
  return pigeonResult;
}
+ (nullable FBStackInfo *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FBStackInfo fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"containers" : (self.containers ?: [NSNull null]),
    @"routes" : (self.routes ?: [NSNull null]),
  };
}
@end

@interface FBNativeRouterApiCodecReader : FlutterStandardReader
@end
@implementation FBNativeRouterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FBCommonParams fromMap:[self readValue]];
    
    case 129:     
      return [FBStackInfo fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FBNativeRouterApiCodecWriter : FlutterStandardWriter
@end
@implementation FBNativeRouterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FBCommonParams class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FBStackInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FBNativeRouterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FBNativeRouterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FBNativeRouterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FBNativeRouterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FBNativeRouterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FBNativeRouterApiCodecReaderWriter *readerWriter = [[FBNativeRouterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FBNativeRouterApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FBNativeRouterApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeRouterApi.pushNativeRoute"
        binaryMessenger:binaryMessenger
        codec:FBNativeRouterApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pushNativeRouteParam:error:)], @"FBNativeRouterApi api (%@) doesn't respond to @selector(pushNativeRouteParam:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FBCommonParams *arg_param = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pushNativeRouteParam:arg_param error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeRouterApi.pushFlutterRoute"
        binaryMessenger:binaryMessenger
        codec:FBNativeRouterApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pushFlutterRouteParam:error:)], @"FBNativeRouterApi api (%@) doesn't respond to @selector(pushFlutterRouteParam:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FBCommonParams *arg_param = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pushFlutterRouteParam:arg_param error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeRouterApi.popRoute"
        binaryMessenger:binaryMessenger
        codec:FBNativeRouterApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(popRouteParam:completion:)], @"FBNativeRouterApi api (%@) doesn't respond to @selector(popRouteParam:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FBCommonParams *arg_param = GetNullableObjectAtIndex(args, 0);
        [api popRouteParam:arg_param completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeRouterApi.getStackFromHost"
        binaryMessenger:binaryMessenger
        codec:FBNativeRouterApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStackFromHostWithError:)], @"FBNativeRouterApi api (%@) doesn't respond to @selector(getStackFromHostWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FBStackInfo *output = [api getStackFromHostWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeRouterApi.saveStackToHost"
        binaryMessenger:binaryMessenger
        codec:FBNativeRouterApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveStackToHostStack:error:)], @"FBNativeRouterApi api (%@) doesn't respond to @selector(saveStackToHostStack:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FBStackInfo *arg_stack = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api saveStackToHostStack:arg_stack error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeRouterApi.sendEventToNative"
        binaryMessenger:binaryMessenger
        codec:FBNativeRouterApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventToNativeParams:error:)], @"FBNativeRouterApi api (%@) doesn't respond to @selector(sendEventToNativeParams:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FBCommonParams *arg_params = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api sendEventToNativeParams:arg_params error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FBFlutterRouterApiCodecReader : FlutterStandardReader
@end
@implementation FBFlutterRouterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FBCommonParams fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FBFlutterRouterApiCodecWriter : FlutterStandardWriter
@end
@implementation FBFlutterRouterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FBCommonParams class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FBFlutterRouterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FBFlutterRouterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FBFlutterRouterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FBFlutterRouterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FBFlutterRouterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FBFlutterRouterApiCodecReaderWriter *readerWriter = [[FBFlutterRouterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FBFlutterRouterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FBFlutterRouterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)pushRouteParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.pushRoute"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)popRouteParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.popRoute"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)removeRouteParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.removeRoute"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onForegroundParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.onForeground"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onBackgroundParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.onBackground"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNativeResultParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.onNativeResult"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onContainerShowParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.onContainerShow"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onContainerHideParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.onContainerHide"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)sendEventToFlutterParam:(FBCommonParams *)arg_param completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.sendEventToFlutter"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:@[arg_param ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onBackPressedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.onBackPressed"
      binaryMessenger:self.binaryMessenger
      codec:FBFlutterRouterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
@end
